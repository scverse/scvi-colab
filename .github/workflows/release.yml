name: Release

on:
    push:
        tags:
            - "*.*.*"

jobs:
    release:
        name: Release
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Install Python
              uses: actions/setup-python@v4
              # see details (matrix, python-version, python-version-file, etc.)
              # https://github.com/actions/setup-python
            - name: Install poetry
              uses: abatilo/actions-poetry@v4
            - name: Setup a local virtual environment (if no poetry.toml file)
              run: |
                  poetry config virtualenvs.create true --local
                  poetry config virtualenvs.in-project true --local
            - uses: actions/cache@v3
              name: Define a cache for the virtual environment based on the dependencies lock file
              with:
                  path: ./.venv
                  key: venv-${{ hashFiles('poetry.lock') }}
            - name: Install the project dependencies
              run: poetry install

            - name: Build project for distribution
              run: poetry build

            - name: Check Version
              id: check-version
              run: |
                  [[ "$(poetry version --short)" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] \
                    || echo ::set-output name=prerelease::true

            - name: Publish to PyPI
              env:
                  POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
              run: poetry publish
#jobs:
#    release:
#        name: Release
#        runs-on: ubuntu-latest
#        steps:
#            # will use ref/SHA that triggered it
#            - name: Checkout code
#              uses: actions/checkout@v3
#
#            - name: Set up Python 3.12
#              uses: actions/setup-python@v2
#              with:
#                  python-version: "3.12"
#
#            - name: Install poetry
#              uses: abatilo/actions-poetry@v3
#              with:
#                  poetry-version: 1.8.5
#
#            - name: Build project for distribution
#              run: poetry build
#
#            - name: Check Version
#              id: check-version
#              run: |
#                  [[ "$(poetry version --short)" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] \
#                    || echo ::set-output name=prerelease::true
#
#            - name: Publish to PyPI
#              env:
#                  POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
#              run: poetry publish
